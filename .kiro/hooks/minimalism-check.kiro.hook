{
  "enabled": true,
  "name": "極簡主義代碼檢查",
  "description": "在程式提交前檢查代碼是否保持極簡主義：代碼必須短小、結構清晰、沒有多餘的條件判斷或嵌套，避免重複與裝飾性的語法，確保一眼就能理解核心意圖。若檢測到複雜邏輯、過度包裝或冗長結構，就視為不符合極簡主義。",
  "version": "1.0",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/**/*.{ts,tsx,js,jsx}",
      "app/**/*.{ts,tsx,js,jsx}",
      "components/**/*.{ts,tsx,js,jsx}",
      "lib/**/*.{ts,tsx,js,jsx}",
      "hooks/**/*.{ts,tsx,js,jsx}",
      "features/**/*.{ts,tsx,js,jsx}",
      "store/**/*.{ts,tsx,js,jsx}",
      "actions/**/*.{ts,tsx,js,jsx}"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "請檢查以下代碼是否符合極簡主義原則：\n\n## 極簡主義檢查標準：\n\n### ✅ 符合極簡主義的特徵：\n- 函數長度 < 20 行\n- 嵌套層級 < 3 層\n- 單一職責，功能明確\n- 變數命名清晰直觀\n- 邏輯流程簡單直接\n- 避免不必要的抽象\n- 代碼可讀性高，一眼就能理解\n- 使用現代 JavaScript/TypeScript 簡潔語法\n- 避免過度工程化\n\n### ❌ 違反極簡主義的特徵：\n- 函數過長 (> 20 行)\n- 過度嵌套 (> 3 層)\n- 複雜的條件判斷鏈\n- 不必要的中間變數\n- 過度的抽象和包裝\n- 裝飾性的語法糖\n- 重複的代碼模式\n- 難以理解的邏輯\n- 過度使用設計模式\n- 不必要的類型轉換\n\n## 請分析代碼並提供：\n\n1. **極簡主義評分** (1-10分，10分為完全符合)\n2. **具體問題點** (如有違反極簡主義的地方)\n3. **改進建議** (如何簡化代碼)\n4. **重構範例** (提供更簡潔的版本)\n\n## 特別關注點：\n- 函數複雜度和長度\n- 嵌套深度和條件複雜度\n- 代碼重複和模式一致性\n- 邏輯清晰度和可讀性\n- 命名直觀性和語義化\n- TypeScript 類型使用是否簡潔\n- React/Next.js 最佳實踐\n- Server Actions 和 TanStack Query 使用\n\n## 輸出格式：\n```\n🎯 極簡主義評分: X/10\n\n✅ 優點:\n- [列出符合極簡主義的地方]\n\n❌ 問題點:\n- [列出需要改進的地方]\n\n💡 改進建議:\n- [具體的簡化建議]\n\n🔧 重構範例:\n[提供簡化後的代碼]\n```\n\n如果代碼完全符合極簡主義原則，請給予肯定並說明優點。如果有改進空間，請提供具體的重構建議。"
  }
}